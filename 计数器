#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define DATA_FILE "daily_counter.dat"

int main() {
    int count = 0;
    int last_year, last_month, last_day;
    FILE *file;

    // 尝试读取数据文件
    file = fopen(DATA_FILE, "r");
    if (file != NULL) {
        // 文件存在，读取数据
        fscanf(file, "%d", &count);
        fscanf(file, "%d %d %d", &last_year, &last_month, &last_day);
        fclose(file);
    } else {
        // 文件不存在，初始化计数器为1并保存当前日期
        time_t now = time(NULL);
        struct tm *local = localtime(&now);
        last_year = local->tm_year + 1900;
        last_month = local->tm_mon + 1;
        last_day = local->tm_mday;
        count = 1;

        // 写入文件
        file = fopen(DATA_FILE, "w");
        if (file == NULL) {
            printf("无法创建数据文件。\n");
            return 1;
        }
        fprintf(file, "%d\n%d %d %d\n", count, last_year, last_month, last_day);
        fclose(file);

        // 输出结果并退出
        printf("当前计数：%d\n", count);
        printf("最后更新日期：%d-%02d-%02d\n", last_year, last_month, last_day);
        return 0;
    }

    // 获取当前日期
    time_t now = time(NULL);
    struct tm *local = localtime(&now);
    int current_year = local->tm_year + 1900;
    int current_month = local->tm_mon + 1;
    int current_day = local->tm_mday;

    // 计算日期数值（便于比较）
    int last_date = last_year * 10000 + last_month * 100 + last_day;
    int current_date = current_year * 10000 + current_month * 100 + current_day;

    // 如果当前日期超过最后记录日期，则计数器加一并更新
    if (current_date > last_date) {
        count++;
        last_year = current_year;
        last_month = current_month;
        last_day = current_day;

        // 保存新数据
        file = fopen(DATA_FILE, "w");
        if (file == NULL) {
            printf("无法保存数据文件。\n");
            return 1;
        }
        fprintf(file, "%d\n%d %d %d\n", count, last_year, last_month, last_day);
        fclose(file);
    }

    // 输出结果
    printf("当前计数：%d\n", count);
    printf("最后更新日期：%d-%02d-%02d\n", last_year, last_month, last_day);

    return 0;
}
